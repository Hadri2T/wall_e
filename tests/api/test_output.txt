============================= test session starts ==============================
platform darwin -- Python 3.10.6, pytest-8.3.5, pluggy-1.6.0 -- /Users/olympedupont/.pyenv/versions/3.10.6/envs/taxifare-env/bin/python
cachedir: .pytest_cache
rootdir: /Users/olympedupont/code/Olympedpnt/07-ML-Ops/04-Predict-in-production/data-fast-api/tests
configfile: pytest_kitt.ini
plugins: anyio-3.7.1, asyncio-1.0.0
asyncio: mode=strict, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 18 items

tests/api/test_cloud_endpoints.py::test_root_is_up FAILED                [  5%]
tests/api/test_cloud_endpoints.py::test_root_returns_greeting FAILED     [ 11%]
tests/api/test_cloud_endpoints.py::test_predict_is_up FAILED             [ 16%]
tests/api/test_cloud_endpoints.py::test_predict_is_dict FAILED           [ 22%]
tests/api/test_cloud_endpoints.py::test_predict_has_key FAILED           [ 27%]
tests/api/test_cloud_endpoints.py::test_cloud_api_predict FAILED         [ 33%]
tests/api/test_docker_endpoints.py::test_root_is_up FAILED               [ 38%]
tests/api/test_docker_endpoints.py::test_root_returns_greeting FAILED    [ 44%]
tests/api/test_docker_endpoints.py::test_predict_is_up FAILED            [ 50%]
tests/api/test_docker_endpoints.py::test_predict_is_dict FAILED          [ 55%]
tests/api/test_docker_endpoints.py::test_predict_has_key FAILED          [ 61%]
tests/api/test_docker_endpoints.py::test_cloud_api_predict FAILED        [ 66%]
tests/api/test_endpoints.py::test_root_is_up PASSED                      [ 72%]
tests/api/test_endpoints.py::test_root_returns_greeting PASSED           [ 77%]
tests/api/test_endpoints.py::test_predict_is_up PASSED                   [ 83%]
tests/api/test_endpoints.py::test_predict_is_dict FAILED                 [ 88%]
tests/api/test_endpoints.py::test_predict_has_key FAILED                 [ 94%]
tests/api/test_endpoints.py::test_predict_val_is_float FAILED            [100%]

=================================== FAILURES ===================================
_______________________________ test_root_is_up ________________________________

    @pytest.mark.asyncio
    async def test_root_is_up():
>       assert SERVICE_URL # Stop if env variable SERVICE_URL is not set
E       assert None

tests/api/test_cloud_endpoints.py:30: AssertionError
__________________________ test_root_returns_greeting __________________________

    @pytest.mark.asyncio
    async def test_root_returns_greeting():
>       assert SERVICE_URL # Stop if env variable SERVICE_URL is not set
E       assert None

tests/api/test_cloud_endpoints.py:38: AssertionError
______________________________ test_predict_is_up ______________________________

    @pytest.mark.asyncio
    async def test_predict_is_up():
>       assert SERVICE_URL # Stop if env variable SERVICE_URL is not set
E       assert None

tests/api/test_cloud_endpoints.py:46: AssertionError
_____________________________ test_predict_is_dict _____________________________

    @pytest.mark.asyncio
    async def test_predict_is_dict():
>       assert SERVICE_URL # Stop if env variable SERVICE_URL is not set
E       assert None

tests/api/test_cloud_endpoints.py:54: AssertionError
_____________________________ test_predict_has_key _____________________________

    @pytest.mark.asyncio
    async def test_predict_has_key():
>       assert SERVICE_URL # Stop if env variable SERVICE_URL is not set
E       assert None

tests/api/test_cloud_endpoints.py:63: AssertionError
____________________________ test_cloud_api_predict ____________________________

    @pytest.mark.asyncio
    async def test_cloud_api_predict():
>       assert SERVICE_URL # Stop if env variable SERVICE_URL is not set
E       assert None

tests/api/test_cloud_endpoints.py:70: AssertionError
_______________________________ test_root_is_up ________________________________

    @pytest.mark.asyncio
    async def test_root_is_up():
>       assert docker_port # Stop if no docker port found
E       assert None

tests/api/test_docker_endpoints.py:48: AssertionError
__________________________ test_root_returns_greeting __________________________

    @pytest.mark.asyncio
    async def test_root_returns_greeting():
>       assert docker_port # Stop if no docker port found
E       assert None

tests/api/test_docker_endpoints.py:56: AssertionError
______________________________ test_predict_is_up ______________________________

    @pytest.mark.asyncio
    async def test_predict_is_up():
>       assert docker_port # Stop if no docker port found
E       assert None

tests/api/test_docker_endpoints.py:64: AssertionError
_____________________________ test_predict_is_dict _____________________________

    @pytest.mark.asyncio
    async def test_predict_is_dict():
>       assert docker_port # Stop if no docker port found
E       assert None

tests/api/test_docker_endpoints.py:72: AssertionError
_____________________________ test_predict_has_key _____________________________

    @pytest.mark.asyncio
    async def test_predict_has_key():
>       assert docker_port # Stop if no docker port found
E       assert None

tests/api/test_docker_endpoints.py:81: AssertionError
____________________________ test_cloud_api_predict ____________________________

    @pytest.mark.asyncio
    async def test_cloud_api_predict():
>       assert docker_port # Stop if no docker port found
E       assert None

tests/api/test_docker_endpoints.py:88: AssertionError
_____________________________ test_predict_is_dict _____________________________

    @pytest.mark.asyncio
    async def test_predict_is_dict():
        from taxifare.api.fast import app
        async with AsyncClient(app=app, base_url="http://test") as ac:
            response = await ac.get("/predict", params=test_params)
        assert isinstance(response.json(), dict)
>       assert len(response.json()) == 1
E       AssertionError: assert 7 == 1
E        +  where 7 = len({'dropoff_latitude': 40.7, 'dropoff_longitude': -73.98, 'passenger_count': 2, 'pickup_datetime': '2013-07-06 10:18:00', ...})
E        +    where {'dropoff_latitude': 40.7, 'dropoff_longitude': -73.98, 'passenger_count': 2, 'pickup_datetime': '2013-07-06 10:18:00', ...} = json()
E        +      where json = <Response [200 OK]>.json

tests/api/test_endpoints.py:44: AssertionError
_____________________________ test_predict_has_key _____________________________

    @pytest.mark.asyncio
    async def test_predict_has_key():
        from taxifare.api.fast import app
        async with AsyncClient(app=app, base_url="http://test") as ac:
            response = await ac.get("/predict", params=test_params)
>       assert response.json().get('fare', False)
E       AssertionError: assert False
E        +  where False = <built-in method get of dict object at 0x1324771c0>('fare', False)
E        +    where <built-in method get of dict object at 0x1324771c0> = {'dropoff_latitude': 40.7, 'dropoff_longitude': -73.98, 'passenger_count': 2, 'pickup_datetime': '2013-07-06 10:18:00', ...}.get
E        +      where {'dropoff_latitude': 40.7, 'dropoff_longitude': -73.98, 'passenger_count': 2, 'pickup_datetime': '2013-07-06 10:18:00', ...} = json()
E        +        where json = <Response [200 OK]>.json

tests/api/test_endpoints.py:52: AssertionError
__________________________ test_predict_val_is_float ___________________________

    @pytest.mark.asyncio
    async def test_predict_val_is_float():
        from taxifare.api.fast import app
        async with AsyncClient(app=app, base_url="http://test") as ac:
            response = await ac.get("/predict", params=test_params)
>       assert isinstance(response.json().get('fare'), float)
E       AssertionError: assert False
E        +  where False = isinstance(None, float)
E        +    where None = <built-in method get of dict object at 0x13246b8c0>('fare')
E        +      where <built-in method get of dict object at 0x13246b8c0> = {'dropoff_latitude': 40.7, 'dropoff_longitude': -73.98, 'passenger_count': 2, 'pickup_datetime': '2013-07-06 10:18:00', ...}.get
E        +        where {'dropoff_latitude': 40.7, 'dropoff_longitude': -73.98, 'passenger_count': 2, 'pickup_datetime': '2013-07-06 10:18:00', ...} = json()
E        +          where json = <Response [200 OK]>.json

tests/api/test_endpoints.py:60: AssertionError
=========================== short test summary info ============================
FAILED tests/api/test_cloud_endpoints.py::test_root_is_up - assert None
FAILED tests/api/test_cloud_endpoints.py::test_root_returns_greeting - assert...
FAILED tests/api/test_cloud_endpoints.py::test_predict_is_up - assert None
FAILED tests/api/test_cloud_endpoints.py::test_predict_is_dict - assert None
FAILED tests/api/test_cloud_endpoints.py::test_predict_has_key - assert None
FAILED tests/api/test_cloud_endpoints.py::test_cloud_api_predict - assert None
FAILED tests/api/test_docker_endpoints.py::test_root_is_up - assert None
FAILED tests/api/test_docker_endpoints.py::test_root_returns_greeting - asser...
FAILED tests/api/test_docker_endpoints.py::test_predict_is_up - assert None
FAILED tests/api/test_docker_endpoints.py::test_predict_is_dict - assert None
FAILED tests/api/test_docker_endpoints.py::test_predict_has_key - assert None
FAILED tests/api/test_docker_endpoints.py::test_cloud_api_predict - assert None
FAILED tests/api/test_endpoints.py::test_predict_is_dict - AssertionError: as...
FAILED tests/api/test_endpoints.py::test_predict_has_key - AssertionError: as...
FAILED tests/api/test_endpoints.py::test_predict_val_is_float - AssertionErro...
=================== 15 failed, 3 passed, 8 warnings in 2.22s ===================
